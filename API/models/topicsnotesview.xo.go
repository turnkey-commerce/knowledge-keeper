// Package models contains the types for schema 'public'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"

	nullable "gopkg.in/guregu/null.v4"
)

// TopicsNotesView represents a row from 'public.topics_notes_view'.
type TopicsNotesView struct {
	NoteID      nullable.Int    `json:"note_id"`     // note_id
	Title       sql.NullString  `json:"title"`       // title
	Description nullable.String `json:"description"` // description
	CreatedBy   nullable.Int    `json:"created_by"`  // created_by
	UpdatedBy   nullable.Int    `json:"updated_by"`  // updated_by
	TopicID     nullable.Int    `json:"topic_id"`    // topic_id
}

// GetRecentPaginatedTopicsNotesViews returns rows from 'public.topics_notes_view',
// that are paginated by the limit and offset inputs.
func GetRecentPaginatedTopicsNotesViews(db XODB, limit int, offset int) ([]*TopicsNotesView, error) {
	const sqlstr = `SELECT ` +
		`note_id, title, description, created_by, updated_by, topic_id ` +
		`FROM public.topics_notes_view ` +
		`ORDER BY date_created DESC ` +
		`LIMIT $1 OFFSET $2`

	q, err := db.Query(sqlstr, limit, offset)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	var res []*TopicsNotesView
	for q.Next() {
		tnv := TopicsNotesView{}

		// scan
		err = q.Scan(&tnv.NoteID, &tnv.Title, &tnv.Description, &tnv.CreatedBy, &tnv.UpdatedBy, &tnv.TopicID)
		if err != nil {
			return nil, err
		}

		res = append(res, &tnv)
	}

	return res, nil
}
