// Package models contains the types for schema 'public'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"

	"github.com/lib/pq"
)

// Note represents a row from 'public.notes'.
type Note struct {
	NoteID      int64          `json:"note_id"`      // note_id
	Title       string         `json:"title"`        // title
	Description sql.NullString `json:"description"`  // description
	CreatedBy   int64          `json:"created_by"`   // created_by
	UpdatedBy   sql.NullInt64  `json:"updated_by"`   // updated_by
	DateCreated time.Time      `json:"date_created"` // date_created
	DateUpdated pq.NullTime    `json:"date_updated"` // date_updated
	TopicID     sql.NullInt64  `json:"topic_id"`     // topic_id

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Note exists in the database.
func (n *Note) Exists() bool {
	return n._exists
}

// Deleted provides information if the Note has been deleted from the database.
func (n *Note) Deleted() bool {
	return n._deleted
}

// Insert inserts the Note to the database.
func (n *Note) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if n._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO public.notes (` +
		`title, description, created_by, updated_by, date_created, date_updated, topic_id` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7` +
		`) RETURNING note_id`

	// run query
	XOLog(sqlstr, n.Title, n.Description, n.CreatedBy, n.UpdatedBy, n.DateCreated, n.DateUpdated, n.TopicID)
	err = db.QueryRow(sqlstr, n.Title, n.Description, n.CreatedBy, n.UpdatedBy, n.DateCreated, n.DateUpdated, n.TopicID).Scan(&n.NoteID)
	if err != nil {
		return err
	}

	// set existence
	n._exists = true

	return nil
}

// Update updates the Note in the database.
func (n *Note) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !n._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if n._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.notes SET (` +
		`title, description, created_by, updated_by, date_created, date_updated, topic_id` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7` +
		`) WHERE note_id = $8`

	// run query
	XOLog(sqlstr, n.Title, n.Description, n.CreatedBy, n.UpdatedBy, n.DateCreated, n.DateUpdated, n.TopicID, n.NoteID)
	_, err = db.Exec(sqlstr, n.Title, n.Description, n.CreatedBy, n.UpdatedBy, n.DateCreated, n.DateUpdated, n.TopicID, n.NoteID)
	return err
}

// Save saves the Note to the database.
func (n *Note) Save(db XODB) error {
	if n.Exists() {
		return n.Update(db)
	}

	return n.Insert(db)
}

// Upsert performs an upsert for Note.
//
// NOTE: PostgreSQL 9.5+ only
func (n *Note) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if n._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.notes (` +
		`note_id, title, description, created_by, updated_by, date_created, date_updated, topic_id` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8` +
		`) ON CONFLICT (note_id) DO UPDATE SET (` +
		`note_id, title, description, created_by, updated_by, date_created, date_updated, topic_id` +
		`) = (` +
		`EXCLUDED.note_id, EXCLUDED.title, EXCLUDED.description, EXCLUDED.created_by, EXCLUDED.updated_by, EXCLUDED.date_created, EXCLUDED.date_updated, EXCLUDED.topic_id` +
		`)`

	// run query
	XOLog(sqlstr, n.NoteID, n.Title, n.Description, n.CreatedBy, n.UpdatedBy, n.DateCreated, n.DateUpdated, n.TopicID)
	_, err = db.Exec(sqlstr, n.NoteID, n.Title, n.Description, n.CreatedBy, n.UpdatedBy, n.DateCreated, n.DateUpdated, n.TopicID)
	if err != nil {
		return err
	}

	// set existence
	n._exists = true

	return nil
}

// Delete deletes the Note from the database.
func (n *Note) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !n._exists {
		return nil
	}

	// if deleted, bail
	if n._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.notes WHERE note_id = $1`

	// run query
	XOLog(sqlstr, n.NoteID)
	_, err = db.Exec(sqlstr, n.NoteID)
	if err != nil {
		return err
	}

	// set deleted
	n._deleted = true

	return nil
}

// UserByCreatedBy returns the User associated with the Note's CreatedBy (created_by).
//
// Generated from foreign key 'notes_created_by_fk'.
func (n *Note) UserByCreatedBy(db XODB) (*User, error) {
	return UserByUserID(db, n.CreatedBy)
}

// UserByUpdatedBy returns the User associated with the Note's UpdatedBy (updated_by).
//
// Generated from foreign key 'notes_updated_by_fk'.
func (n *Note) UserByUpdatedBy(db XODB) (*User, error) {
	return UserByUserID(db, n.UpdatedBy.Int64)
}

// Topic returns the Topic associated with the Note's TopicID (topic_id).
//
// Generated from foreign key 'topics_notes_fk'.
func (n *Note) Topic(db XODB) (*Topic, error) {
	return TopicByTopicID(db, n.TopicID.Int64)
}

// NoteByNoteID retrieves a row from 'public.notes' as a Note.
//
// Generated from index 'notes_pk'.
func NoteByNoteID(db XODB, noteID int64) (*Note, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`note_id, title, description, created_by, updated_by, date_created, date_updated, topic_id ` +
		`FROM public.notes ` +
		`WHERE note_id = $1`

	// run query
	XOLog(sqlstr, noteID)
	n := Note{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, noteID).Scan(&n.NoteID, &n.Title, &n.Description, &n.CreatedBy, &n.UpdatedBy, &n.DateCreated, &n.DateUpdated, &n.TopicID)
	if err != nil {
		return nil, err
	}

	return &n, nil
}

// NotesByTitle retrieves a row from 'public.notes' as a Note.
//
// Generated from index 'notes_title_idx'.
func NotesByTitle(db XODB, title string) ([]*Note, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`note_id, title, description, created_by, updated_by, date_created, date_updated, topic_id ` +
		`FROM public.notes ` +
		`WHERE title = $1`

	// run query
	XOLog(sqlstr, title)
	q, err := db.Query(sqlstr, title)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Note{}
	for q.Next() {
		n := Note{
			_exists: true,
		}

		// scan
		err = q.Scan(&n.NoteID, &n.Title, &n.Description, &n.CreatedBy, &n.UpdatedBy, &n.DateCreated, &n.DateUpdated, &n.TopicID)
		if err != nil {
			return nil, err
		}

		res = append(res, &n)
	}

	return res, nil
}
