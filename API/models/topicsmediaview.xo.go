// Package models contains the types for schema 'public'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"

	nullable "gopkg.in/guregu/null.v4"
)

// TopicsMediaView represents a row from 'public.topics_media_view'.
type TopicsMediaView struct {
	MediaID     nullable.Int    `json:"media_id"`    // media_id
	Type        MediaType       `json:"type"`        // type
	Title       sql.NullString  `json:"title"`       // title
	Description nullable.String `json:"description"` // description
	URL         sql.NullString  `json:"url"`         // url
	CreatedBy   nullable.Int    `json:"created_by"`  // created_by
	UpdatedBy   nullable.Int    `json:"updated_by"`  // updated_by
	TopicID     nullable.Int    `json:"topic_id"`    // topic_id
}

// GetRecentPaginatedTopicsMediaViews returns rows from 'public.topics_media_view',
// that are paginated by the limit and offset inputs.
func GetRecentPaginatedTopicsMediaViews(db XODB, limit int, offset int) ([]*TopicsMediaView, error) {
	const sqlstr = `SELECT ` +
		`media_id, type, title, description, url, created_by, updated_by, topic_id ` +
		`FROM public.topics_media_view ` +
		`ORDER BY date_created DESC ` +
		`LIMIT $1 OFFSET $2`

	q, err := db.Query(sqlstr, limit, offset)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	var res []*TopicsMediaView
	for q.Next() {
		tmv := TopicsMediaView{}

		// scan
		err = q.Scan(&tmv.MediaID, &tmv.Type, &tmv.Title, &tmv.Description, &tmv.URL, &tmv.CreatedBy, &tmv.UpdatedBy, &tmv.TopicID)
		if err != nil {
			return nil, err
		}

		res = append(res, &tmv)
	}

	return res, nil
}
