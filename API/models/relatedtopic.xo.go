// Package models contains the types for schema 'public'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
)

// RelatedTopic represents a row from 'public.related_topics'.
type RelatedTopic struct {
	TopicID        int64 `json:"topic_id"`         // topic_id
	RelatedTopicID int64 `json:"related_topic_id"` // related_topic_id

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the RelatedTopic exists in the database.
func (rt *RelatedTopic) Exists() bool {
	return rt._exists
}

// Deleted provides information if the RelatedTopic has been deleted from the database.
func (rt *RelatedTopic) Deleted() bool {
	return rt._deleted
}

// Insert inserts the RelatedTopic to the database.
func (rt *RelatedTopic) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if rt._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO public.related_topics (` +
		`topic_id, related_topic_id` +
		`) VALUES (` +
		`$1, $2` +
		`)`

	// run query
	XOLog(sqlstr, rt.TopicID, rt.RelatedTopicID)
	_, err = db.Exec(sqlstr, rt.TopicID, rt.RelatedTopicID)
	if err != nil {
		return err
	}

	// set existence
	rt._exists = true

	return nil
}

// Update statements omitted due to lack of fields other than primary key

// Delete deletes the RelatedTopic from the database.
func (rt *RelatedTopic) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !rt._exists {
		return nil
	}

	// if deleted, bail
	if rt._deleted {
		return nil
	}

	// sql query with composite primary key
	const sqlstr = `DELETE FROM public.related_topics  WHERE topic_id = $1 AND related_topic_id = $2`

	// run query
	XOLog(sqlstr, rt.TopicID, rt.RelatedTopicID)
	_, err = db.Exec(sqlstr, rt.TopicID, rt.RelatedTopicID)
	if err != nil {
		return err
	}

	// set deleted
	rt._deleted = true

	return nil
}

// GetRecentPaginatedRelatedTopics returns rows from 'public.related_topics',
// that are paginated by the limit and offset inputs.
func GetRecentPaginatedRelatedTopics(db XODB, limit int, offset int) ([]*RelatedTopic, error) {
	const sqlstr = `SELECT ` +
		`topic_id, related_topic_id ` +
		`FROM public.related_topics ` +
		`ORDER BY date_created DESC ` +
		`LIMIT $1 OFFSET $2`

	q, err := db.Query(sqlstr, limit, offset)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	var res []*RelatedTopic
	for q.Next() {
		rt := RelatedTopic{}

		// scan
		err = q.Scan(&rt.TopicID, &rt.RelatedTopicID)
		if err != nil {
			return nil, err
		}

		res = append(res, &rt)
	}

	return res, nil
}

// RelatedTopicByTopicIDRelatedTopicID retrieves a row from 'public.related_topics' as a RelatedTopic.
//
// Generated from index 'related_topics_pk'.
func RelatedTopicByTopicIDRelatedTopicID(db XODB, topicID int64, relatedTopicID int64) (*RelatedTopic, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`topic_id, related_topic_id ` +
		`FROM public.related_topics ` +
		`WHERE topic_id = $1 AND related_topic_id = $2`

	// run query
	XOLog(sqlstr, topicID, relatedTopicID)
	rt := RelatedTopic{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, topicID, relatedTopicID).Scan(&rt.TopicID, &rt.RelatedTopicID)
	if err != nil {
		return nil, err
	}

	return &rt, nil
}
